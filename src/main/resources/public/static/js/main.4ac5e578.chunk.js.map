{"version":3,"sources":["api/api.routes.ts","components/stats_panel.tsx","store/albums_store.ts","components/audio_player_component.tsx","store/player_store.ts","store/artists_store.ts","store/root_store.ts","components/album_item.tsx","components/albums_list.tsx","components/artist_item.tsx","components/artists_list.tsx","components/track_item.tsx","components/tracks_list.tsx","components/search_component.tsx","components/header.tsx","theme.ts","components/footer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ApiBaseUrl","StatsPanel","useState","stats","setStats","useEffect","undefined","fetch","then","res","json","data","direction","totalArtists","totalTracks","totalAudioLength","totalFileSize","totalPlayLists","AlbumsStore","albumcache","Map","makeAutoObservable","this","hashId","has","artistJson","artist","set","get","action","AudioPlayerComponent","observer","track","context","hash","setHash","albumUrl","setAlbumUrl","console","log","playerStore","currentTrack","albumStore","findAlbumById","albumHashId","coverUrl","src","autoPlay","controls","artistName","trackName","PlayerStore","currentTrackHashId","String","ArtistsStore","artistsCache","RootStore","artistStore","AlbumItem","album","templateColumns","style","width","gap","w","h","bg","name","AlbumList","albums","map","value","ArtistItem","ArtistsList","artists","TrackItem","onClick","event","TracksLists","tracks","SearchComponent","search","setSearch","results","setResults","length","placeholder","onChange","ev","target","playTrack","Header","rootStore","justify","borderBottom","borderColor","p","as","size","m","customTheme","theme","fonts","body","heading","mono","colors","brand","teal","dandelion","Footer","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0NAAaA,EAAa,+B,yBCKbC,EAAa,WAEtB,MAA0BC,qBAA1B,mBAAOC,EAAP,KAAcC,EAAd,KAQA,OAPAC,qBAAU,WACN,QAAcC,IAAVH,EACgBI,MDRFP,2CCQoBQ,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAAAG,GAC3DP,EAASO,SAIb,eAAC,IAAD,CAAOC,UAAU,MAAjB,UACJ,eAAC,IAAD,WACI,cAAC,IAAD,sBACA,cAAC,IAAD,iBAAaT,QAAb,IAAaA,OAAb,EAAaA,EAAOU,kBAExB,eAAC,IAAD,WACI,cAAC,IAAD,qBACA,cAAC,IAAD,iBAAaV,QAAb,IAAaA,OAAb,EAAaA,EAAOW,iBAExB,eAAC,IAAD,WACI,cAAC,IAAD,2BACA,cAAC,IAAD,iBAAaX,QAAb,IAAaA,OAAb,EAAaA,EAAOY,sBAExB,eAAC,IAAD,WACI,cAAC,IAAD,8BACA,cAAC,IAAD,iBAAaZ,QAAb,IAAaA,OAAb,EAAaA,EAAOa,mBAExB,eAAC,IAAD,WACI,cAAC,IAAD,wBACA,cAAC,IAAD,WAAkB,OAALb,QAAK,IAALA,OAAA,EAAAA,EAAOc,iBAAkB,W,mGC9BrCC,GAAb,aAOI,aAAe,yBANfC,WAAuC,IAAIC,IAOvCC,YAAmBC,MAR3B,wCAGI,WACI,OAAOA,KAAKH,aAJpB,kEAWI,WAC2BI,GAD3B,4EAESD,KAAKH,WAAWK,IAAID,GAF7B,gCAGwChB,MFTlBP,yCESkC,WAAOuB,IAH/D,8BAG0Eb,OAH1E,OAGce,EAHd,OAIcC,EAASD,EAAWd,KAC1BW,KAAKH,WAAWQ,IAAIJ,EAAQG,GALpC,gCAOWJ,KAAKH,WAAWS,IAAIL,IAP/B,gDAXJ,uGAWKM,KAXL,6E,kBCMaC,EAAuBC,aAAS,YAAoE,IAAD,IHNnFR,EGMkBS,EAAiE,EAAjEA,MAAOC,EAA0D,EAA1DA,QAClD,EAAwB/B,mBAAS,IAAjC,mBAAOgC,EAAP,KAAaC,EAAb,KACA,EAAgCjC,mBAAS,IAAzC,mBAAOkC,EAAP,KAAiBC,EAAjB,KACmB,IAAInB,EAcvB,OAZAb,qBAAU,WAAO,IAAD,EACZiC,QAAQC,IAAR,UAAeP,IACfM,QAAQC,IAAI,YAAcN,EAAQO,YAAYC,cAC9CN,GAAQ,UAAAF,EAAQO,YAAYC,oBAApB,eAAkClB,SAAU,IAChDU,EAAQO,YAAYC,cACpBR,EAAQS,WAAWC,cAAeV,EAAQO,YAAYC,aAA6BG,aAAapC,MAAK,SAAAG,GACjG0B,GAAgB,OAAJ1B,QAAI,IAAJA,OAAA,EAAAA,EAAMkC,WAAY,SAGvC,CAACZ,EAAQO,YAAYC,eAIpB,qCACA,cAAC,IAAD,CAAkBK,KHzBGvB,EGyBeW,EHxBxCI,QAAQC,IAAR,2BAAiCvC,EAAa,WAAauB,IACpDvB,EAAa,WAAauB,GGuBcwB,UAAQ,EAACC,UAAQ,IACxD,cAAC,IAAD,CAAOF,IAAKV,IACZ,eAAC,IAAD,qBAAOH,EAAQO,YAAYC,oBAA3B,aAAO,EAAkCQ,WAAzC,gBAAwDhB,EAAQO,YAAYC,oBAA5E,aAAwD,EAAkCS,mB,SC7BzFC,GAAb,aAQI,aAAe,yBALfC,mBAAqB,GAKP,KAJdX,kBAIc,EACVpB,YAAmBC,MACnBA,KAAKmB,kBAAenC,EAV5B,6CAMI,WAAoB,OAAOgB,KAAK8B,qBANpC,uBAaI,SACiB7B,GACbe,QAAQC,IAAI,iBACZD,QAAQC,IAAIhB,GACRA,aAAkB8B,OAClB/B,KAAK8B,mBAAqB7B,GAG1BD,KAAKmB,aAAelB,EACpBD,KAAK8B,mBAAsB7B,EAAuBA,YAtB9D,0CAaKM,KAbL,yECEayB,GAAb,aAOI,aAAe,yBANfC,aAA0C,IAAInC,IAO1CC,YAAmBC,MAR3B,yCAGI,WACI,OAAOA,KAAKiC,eAJpB,mEAWI,WAC4BhC,GAD5B,4EAESD,KAAKiC,aAAa/B,IAAID,GAF/B,gCAGwChB,MLVlBP,0CKUkC,WAAOuB,IAH/D,8BAG0Eb,OAH1E,OAGce,EAHd,OAIcC,EAASD,EAAWd,KAC1BW,KAAKiC,aAAa5B,IAAIJ,EAAQG,GALtC,gCAOWJ,KAAKiC,aAAa3B,IAAIL,IAPjC,gDAXJ,wGAWKM,KAXL,8ECCa2B,EAMT,aAAe,yBAJfhB,iBAIc,OAHdE,gBAGc,OAFde,iBAEc,EACVpC,YAAmBC,MACnBA,KAAKkB,YAAc,IAAIW,EACvB7B,KAAKoB,WAAa,IAAIxB,EACtBI,KAAKmC,YAAc,IAAIH,G,sDCZlBI,EAAY,SAAC,GAAqC,IAApCC,EAAmC,EAAnCA,MACvB,OAAQ,eAAC,IAAD,CAAMC,gBAAgB,iBAAiBC,MAAO,CAACC,MAAO,SAAUC,IAAK,EAArE,UACJ,cAAC,IAAD,CAAKC,EAAE,MAAMC,EAAE,KAAKC,GAAG,WAAvB,SACI,cAAC,IAAD,CAAQC,KAAMR,EAAMQ,KAAMrB,IAAKa,EAAMd,aAEzC,cAAC,IAAD,CAAKmB,EAAE,MAAMC,EAAE,KAAKC,GAAG,WAAvB,SACI,eAAC,IAAD,WAAOP,EAAMjC,OAAOyC,KAApB,MAA6BR,EAAMQ,cCJlCC,EAAY,SAAC,GAA0C,IAAzCC,EAAwC,EAAxCA,OACvB,OAAQ,cAAC,IAAD,iBACHA,QADG,IACHA,OADG,EACHA,EAAQC,KAAI,SAAAC,GACT,OACI,cAAC,EAAD,CAAyCZ,MAAOY,GAAhCA,EAAMhD,OAAOgD,EAAMJ,YCLtCK,EAAa,SAAC,GAAuC,IAAtC9C,EAAqC,EAArCA,OACxB,OAAQ,cAAC,IAAD,CAAMkC,gBAAgB,iBAAiBC,MAAO,CAACC,MAAO,SAAUC,IAAK,EAArE,SACJ,cAAC,IAAD,CAAKC,EAAE,MAAMC,EAAE,KAAKC,GAAG,WAAvB,SACI,cAAC,IAAD,UAAOxC,EAAOyC,YCDbM,EAAc,SAAC,GAA6C,IAA5CC,EAA2C,EAA3CA,QACzB,OAAQ,cAAC,IAAD,iBACHA,QADG,IACHA,OADG,EACHA,EAASJ,KAAI,SAAAC,GACV,OACI,cAAC,EAAD,CAA+B7C,OAAQ6C,GAAtBA,EAAMhD,c,SCP1BoD,EAAY,SAAC,GAAoF,IAAnF3C,EAAkF,EAAlFA,MAAO4C,EAA2E,EAA3EA,QAC9B,OACI,cAAC,IAAD,CAAMhB,gBAAgB,iBAAiBG,IAAK,EAA5C,SACI,cAAC,IAAD,CAAKC,EAAE,OAAOC,EAAE,KAAKC,GAAG,WAAxB,SACI,eAAC,IAAD,CAAMU,QAAS,SAAAC,GAAK,OAAID,EAAQ5C,IAAhC,eAA4CA,EAAMiB,WAAlD,MAAiEjB,EAAMkB,kBCD1E4B,EAAc,SAAC,GAAyF,IAAxFC,EAAuF,EAAvFA,OAAQH,EAA+E,EAA/EA,QACjC,OAAQ,cAAC,IAAD,iBACHG,QADG,IACHA,OADG,EACHA,EAAQT,KAAI,SAAAC,GACT,OACI,cAAC,EAAD,CAAWK,QAASA,EAA4C5C,MAAOuC,GAArCA,EAAMhD,OAAOgD,EAAMrB,iBCCxD8B,EAAkB,SAAC,GAAsC,IAArC/C,EAAoC,EAApCA,QAE7B,EAA4B/B,mBAAS,IAArC,mBAAO+E,EAAP,KAAeC,EAAf,KACA,EAA8BhF,qBAA9B,mBAAOiF,EAAP,KAAgBC,EAAhB,KAWA,OATA/E,qBAAU,WACF4E,GAAUA,EAAOI,QAAU,GAC3B9E,MAAM,GAAD,ObPgBP,oDaOhB,iBAA8BiF,IAAUzE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAAAG,GACtEyE,EAAWzE,GACX2B,QAAQC,IAAI5B,QAGrB,CAACsE,IAEI,eAAC,IAAD,WACA,cAAC,IAAD,CAAKjB,EAAG,IAAR,SACA,cAAC,IAAD,CAAOsB,YAAa,eAAgBC,SAAU,SAACC,GAAD,OAAQN,EAAUM,EAAGC,OAAOlB,YAE9E,eAAC,IAAD,WACI,cAAC,EAAD,CAAWF,OAAM,OAAEc,QAAF,IAAEA,OAAF,EAAEA,EAASd,SAC5B,cAAC,EAAD,CAAaK,QAAO,OAAES,QAAF,IAAEA,OAAF,EAAEA,EAAST,UAC/B,cAAC,EAAD,CAAaE,QAAS,SAACC,GAAW5C,EAAQO,YAAYkD,UAAUb,IAAUE,OAAM,OAAEI,QAAF,IAAEA,OAAF,EAAEA,EAASJ,gBC1B1FY,EAAS,SAAC,GAA0C,IAAzCC,EAAwC,EAAxCA,UACpB,OAAQ,eAAC,IAAD,CAAMC,QAAQ,gBAAgBC,aAAa,MAAMC,YAAY,WAAWC,EAAG,EAA3E,UACJ,cAAC,IAAD,CAASC,GAAG,KAAKC,KAAK,KAAKC,EAAG,EAA9B,2BAGA,cAAC,IAAD,CAASF,GAAG,KAAKC,KAAK,KAAKC,EAAG,EAA9B,SACI,cAAC,EAAD,CAAiBlE,QAAS2D,U,wBCXzBQ,GAAW,2BACjBC,SADiB,IAEpBC,MAAO,CACHC,KAAM,wBACNC,QAAS,iBACTC,KAAM,oBAEVC,OAAO,2BACAL,QAAMK,QADP,IAEFC,MAAO,CACH,IAAK,UACL,IAAK,UACL,IAAK,WAETC,KAAM,CACF,IAAK,WAETC,UAAW,CACP,IAAK,UACL,IAAK,cCfJC,GAAS,SAAC,GAAyC,EAAxClB,UACpB,OAAQ,eAAC,IAAD,CAAMC,QAAQ,gBAAgBC,aAAa,MAAMC,YAAY,WAAWC,EAAG,EAA3E,UACJ,cAAC,IAAD,CAASC,GAAG,KAAKC,KAAK,KAAKC,EAAG,EAA9B,2BAGA,cAAC,IAAD,CAASF,GAAG,KAAKC,KAAK,KAAKC,EAAG,QC6BvBY,OAvBf,WACI,IAAMnB,EAAY,IAAIpC,EACtB,OACI,eAAC,IAAD,CAAe6C,MAAOD,GAAtB,UACI,cAAC,IAAD,IACA,eAAC,IAAD,WACI,cAAC,EAAD,CAAQR,UAAWA,IACnB,cAAC,IAAD,UACI,sBAAKoB,UAAU,MAAf,UACI,cAAC,EAAD,IAGA,cAAClF,EAAD,CAAsBG,QAAS2D,EAAW5D,WAAO1B,SAIzD,cAAC,GAAD,CAAQsF,UAAWA,WClBpBqB,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqB3G,MAAK,YAAkD,IAA/C4G,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1BZ,O","file":"static/js/main.4ac5e578.chunk.js","sourcesContent":["export const ApiBaseUrl = \"http://localhost:8080/api/v1\";\n\nexport const StatsRoute = ApiBaseUrl + \"/statistics\"\nexport const AllAlbumRouter = ApiBaseUrl + \"/albums/all\";\nexport const GetStreamUrl = (hashId: string) => {\n    console.log(`Full stream url: ${ ApiBaseUrl + \"/stream/\" + hashId}`)\n    return ApiBaseUrl + \"/stream/\" + hashId\n};\nexport const ArtistById = ApiBaseUrl + \"/artists/id\";\nexport const AlbumsById = ApiBaseUrl + \"/albums/id\";\n\nexport const AutocompleteRoute = ApiBaseUrl + \"/indexes/autocomplete\";","import {useEffect, useState} from \"react\";\nimport {StatsResponse} from \"../api/api.interfaces\";\nimport {StatsRoute} from \"../api/api.routes\";\nimport {Stack, Stat, StatLabel, StatNumber} from \"@chakra-ui/react\"\n\nexport const StatsPanel = () => {\n\n    const [stats, setStats] = useState<StatsResponse>()\n    useEffect(() => {\n        if (stats === undefined) {\n            const results = fetch(StatsRoute).then(res => res.json()).then(data => {\n                setStats(data as StatsResponse);\n            })\n        }\n    })\n    return (<Stack direction=\"row\">\n        <Stat>\n            <StatLabel>Artists</StatLabel>\n            <StatNumber>{stats?.totalArtists}</StatNumber>\n        </Stat>\n        <Stat>\n            <StatLabel>Tracks</StatLabel>\n            <StatNumber>{stats?.totalTracks}</StatNumber>\n        </Stat>\n        <Stat>\n            <StatLabel>Audio length</StatLabel>\n            <StatNumber>{stats?.totalAudioLength}</StatNumber>\n        </Stat>\n        <Stat>\n            <StatLabel>Total file size</StatLabel>\n            <StatNumber>{stats?.totalFileSize}</StatNumber>\n        </Stat>\n        <Stat>\n            <StatLabel>Playlists</StatLabel>\n            <StatNumber>{stats?.totalPlayLists || 0}</StatNumber>\n        </Stat>\n\n\n    </Stack>)\n}","import {action, makeAutoObservable} from \"mobx\";\nimport {AlbumEntity, ArtistEntity} from \"../api/api.interfaces\";\nimport {AlbumsById, ArtistById} from \"../api/api.routes\";\n\nexport class AlbumsStore {\n    albumcache: Map<String, AlbumEntity> = new Map<String, AlbumEntity>();\n\n    get albums() {\n        return this.albumcache;\n    }\n\n    constructor() {\n        makeAutoObservable(this)\n    }\n\n    @action\n    public async findAlbumById(hashId: string): Promise<AlbumEntity | undefined> {\n        if (!this.albumcache.has(hashId)) {\n            const artistJson = await (await fetch(AlbumsById + `/${hashId}`)).json();\n            const artist = artistJson.data;\n            this.albumcache.set(hashId, artist)\n        }\n        return this.albumcache.get(hashId);\n    }\n\n\n}","import ReactAudioPlayer from 'react-audio-player';\nimport {useCallback, useEffect, useState} from \"react\";\nimport {GetStreamUrl} from \"../api/api.routes\";\nimport {TrackEntity} from \"../api/api.interfaces\";\nimport {observer} from \"mobx-react\";\nimport {PlayerStore} from \"../store/player_store\";\nimport {AlbumsStore} from \"../store/albums_store\";\nimport {RootStore} from \"../store/root_store\";\nimport {Image, Text} from \"@chakra-ui/react\";\n\nexport const AudioPlayerComponent = observer(({track, context}: { track?: TrackEntity, context: RootStore }) => {\n    const [hash, setHash] = useState(\"\");\n    const [albumUrl, setAlbumUrl] = useState(\"\");\n    const albumStore = new AlbumsStore();\n\n    useEffect(() => {\n        console.log(`${track}`)\n        console.log(\"SELECTED \" + context.playerStore.currentTrack)\n        setHash(context.playerStore.currentTrack?.hashId || \"\");\n        if (context.playerStore.currentTrack) {\n            context.albumStore.findAlbumById((context.playerStore.currentTrack as TrackEntity).albumHashId).then(data => {\n                setAlbumUrl(data?.coverUrl || \"\");\n            })\n        }\n    }, [context.playerStore.currentTrack])\n\n\n    return (\n        <>\n        <ReactAudioPlayer src={GetStreamUrl(hash)} autoPlay controls/>\n            <Image src={albumUrl} />\n            <Text>{context.playerStore.currentTrack?.artistName} - {context.playerStore.currentTrack?.trackName}</Text>\n        </>\n    )\n});","import {action, makeAutoObservable} from \"mobx\"\nimport {TrackEntity} from \"../api/api.interfaces\";\nexport class PlayerStore {\n\n\n    currentTrackHashId = \"\"\n    currentTrack: TrackEntity | undefined;\n\n    get trackHashId () {return this.currentTrackHashId};\n\n    constructor() {\n        makeAutoObservable(this)\n        this.currentTrack = undefined;\n    }\n\n    @action\n    public playTrack(hashId: string | TrackEntity): void {\n        console.log(\"Store select \")\n        console.log(hashId);\n        if (hashId instanceof String) {\n            this.currentTrackHashId = hashId as string;\n        }\n        else {\n            this.currentTrack = hashId as TrackEntity;\n            this.currentTrackHashId = (hashId as TrackEntity).hashId;\n        }\n    }\n\n}","import {action, makeAutoObservable} from \"mobx\";\nimport {ArtistEntity} from \"../api/api.interfaces\";\nimport {ArtistById} from \"../api/api.routes\";\n\nexport class ArtistsStore {\n    artistsCache: Map<String, ArtistEntity> = new Map<String, ArtistEntity>();\n\n    get artists() {\n        return this.artistsCache;\n    }\n\n    constructor() {\n        makeAutoObservable(this)\n    }\n\n    @action\n    public async findArtistById(hashId: string): Promise<ArtistEntity | undefined> {\n        if (!this.artistsCache.has(hashId)) {\n            const artistJson = await (await fetch(ArtistById + `/${hashId}`)).json();\n            const artist = artistJson.data;\n            this.artistsCache.set(hashId, artist)\n        }\n        return this.artistsCache.get(hashId);\n    }\n\n\n}","import {makeAutoObservable} from \"mobx\";\nimport {PlayerStore} from \"./player_store\";\nimport {AlbumsStore} from \"./albums_store\";\nimport {ArtistsStore} from \"./artists_store\";\n\nexport class RootStore {\n\n    playerStore: PlayerStore;\n    albumStore: AlbumsStore;\n    artistStore: ArtistsStore;\n\n    constructor() {\n        makeAutoObservable(this)\n        this.playerStore = new PlayerStore();\n        this.albumStore = new AlbumsStore();\n        this.artistStore = new ArtistsStore();\n    }\n}","import {AlbumEntity} from \"../api/api.interfaces\";\nimport {Avatar, Box, Grid, Text} from \"@chakra-ui/react\"\n\nexport const AlbumItem = ({album}: { album: AlbumEntity }) => {\n    return (<Grid templateColumns=\"repeat(2, 1fr)\" style={{width: '800px'}} gap={6}>\n        <Box w=\"20%\" h=\"10\" bg=\"blue.500\">\n            <Avatar name={album.name} src={album.coverUrl}/>\n        </Box>\n        <Box w=\"80%\" h=\"10\" bg=\"blue.500\">\n            <Text>{album.artist.name} - {album.name}</Text>\n        </Box>\n    </Grid>)\n\n}","import react from \"react\";\nimport {AlbumEntity} from \"../api/api.interfaces\";\nimport {Box} from \"@chakra-ui/react\";\nimport {AlbumItem} from \"./album_item\";\n\nexport const AlbumList = ({albums}: { albums?: AlbumEntity[] }) => {\n    return (<Box>\n        {albums?.map(value => {\n            return (\n                <AlbumItem key={value.hashId+value.name} album={value}/>\n            )\n        })}\n    </Box>)\n\n}","import react from \"react\";\nimport {Avatar, Box, Grid, Text} from \"@chakra-ui/react\";\nimport {ArtistEntity} from \"../api/api.interfaces\";\n\nexport const ArtistItem = ({artist} : {artist: ArtistEntity}) => {\n    return (<Grid templateColumns=\"repeat(2, 1fr)\" style={{width: '800px'}} gap={6}>\n        <Box w=\"80%\" h=\"10\" bg=\"blue.500\">\n            <Text>{artist.name}</Text>\n        </Box>\n    </Grid>)\n}","import react from \"react\";\nimport {ArtistEntity} from \"../api/api.interfaces\";\nimport {Box} from \"@chakra-ui/react\";\nimport {AlbumItem} from \"./album_item\";\nimport {ArtistItem} from \"./artist_item\";\n\nexport const ArtistsList = ({artists}: { artists?: ArtistEntity[] }) => {\n    return (<Box>\n        {artists?.map(value => {\n            return (\n                <ArtistItem key={value.hashId} artist={value}/>\n            )\n        })}\n    </Box>)\n}","import {TrackEntity} from \"../api/api.interfaces\";\nimport {Box, Grid, Link} from \"@chakra-ui/react\"\n\nexport const TrackItem = ({track, onClick}: { track: TrackEntity, onClick: (hash: TrackEntity) => void }) => {\n    return (\n        <Grid templateColumns=\"repeat(2, 1fr)\" gap={6}>\n            <Box w=\"100%\" h=\"10\" bg=\"blue.500\">\n                <Link onClick={event => onClick(track)} >  {track.artistName} - {track.trackName}</Link>\n            </Box>\n\n        </Grid>\n    )\n}","import react from \"react\";\nimport {TrackEntity} from \"../api/api.interfaces\";\nimport {Box} from \"@chakra-ui/react\";\nimport {AlbumItem} from \"./album_item\";\nimport {TrackItem} from \"./track_item\";\n\nexport const TracksLists = ({tracks, onClick} : {tracks?: TrackEntity[]; onClick: (track: TrackEntity ) => void}) =>{\n    return (<Box>\n        {tracks?.map(value => {\n            return (\n                <TrackItem onClick={onClick} key={value.hashId+value.trackName} track={value}/>\n            )\n        })}\n    </Box>)\n}","import react, {useEffect, useState} from \"react\"\nimport {Box, Container, Input} from \"@chakra-ui/react\";\nimport {SearchResultEntity} from \"../api/api.interfaces\";\nimport {AutocompleteRoute} from \"../api/api.routes\";\nimport {AlbumsPanel} from \"./albums_panel\";\nimport {AlbumList} from \"./albums_list\";\nimport {ArtistsList} from \"./artists_list\";\nimport {TracksLists} from \"./tracks_list\";\nimport {PlayerStore} from \"../store/player_store\";\nimport {RootStore} from \"../store/root_store\";\n\nexport const SearchComponent = ({context} : {context: RootStore}) => {\n\n    const [search, setSearch] = useState(\"\");\n    const [results, setResults] = useState<SearchResultEntity>();\n\n    useEffect(() => {\n        if (search && search.length >= 3) {\n            fetch(`${AutocompleteRoute}?text=${search}`).then(res => res.json()).then(data => {\n                setResults(data);\n                console.log(data);\n            })\n        }\n    }, [search]);\n\n    return (<Container>\n            <Box w={300}>\n            <Input placeholder={\"input search\"} onChange={(ev) => setSearch(ev.target.value)} />\n        </Box>\n        <Box>\n            <AlbumList albums={results?.albums} />\n            <ArtistsList artists={results?.artists} />\n            <TracksLists onClick={(event) => {context.playerStore.playTrack(event)}}  tracks={results?.tracks}/>\n        </Box>\n\n    </Container>)\n}","import react from \"react\";\nimport {Flex, Heading, Link} from \"@chakra-ui/react\";\nimport {SearchComponent} from \"./search_component\";\nimport React from \"react\";\nimport {RootStore} from \"../store/root_store\";\n\nexport const Header = ({rootStore} : {rootStore: RootStore}) => {\n    return (<Flex justify=\"space-between\" borderBottom=\"1px\" borderColor=\"gray.200\" p={3}>\n        <Heading as=\"h3\" size=\"lg\" m={1}>\n           Sofa Streamer\n        </Heading>\n        <Heading as=\"h3\" size=\"lg\" m={1}>\n            <SearchComponent context={rootStore} />\n        </Heading>\n    </Flex>)\n}","import { theme } from \"@chakra-ui/react\";\nexport const customTheme = {\n    ...theme,\n    fonts: {\n        body: \"system-ui, sans-serif\",\n        heading: \"Georgia, serif\",\n        mono: \"Menlo, monospace\"\n    },\n    colors: {\n        ...theme.colors,\n        brand: {\n            900: \"#1a365d\",\n            800: \"#153e75\",\n            700: \"#2a69ac\"\n        },\n        teal: {\n            500: \"#319795\"\n        },\n        dandelion: {\n            100: \"#FFE066\",\n            200: \"FFDA49\"\n        }\n    }\n};","import {RootStore} from \"../store/root_store\";\nimport {Flex, Heading} from \"@chakra-ui/react\";\nimport {SearchComponent} from \"./search_component\";\nimport React from \"react\";\n\nexport const Footer = ({rootStore} : {rootStore: RootStore}) => {\n    return (<Flex justify=\"space-between\" borderBottom=\"1px\" borderColor=\"gray.200\" p={3}>\n        <Heading as=\"h3\" size=\"lg\" m={1}>\n            Sofa Streamer\n        </Heading>\n        <Heading as=\"h3\" size=\"lg\" m={1}>\n\n        </Heading>\n    </Flex>)\n}","import React, {createContext} from 'react';\nimport './App.css';\nimport {StatsPanel} from \"./components/stats_panel\";\nimport {ChakraProvider, Container} from \"@chakra-ui/react\"\nimport {AudioPlayerComponent} from \"./components/audio_player_component\";\nimport {AlbumsPanel} from \"./components/albums_panel\";\nimport {Grid, GridItem, Flex, Button, Box, CSSReset} from \"@chakra-ui/react\"\nimport {SearchComponent} from \"./components/search_component\";\nimport {PlayerStore} from \"./store/player_store\";\nimport {RootStore} from \"./store/root_store\";\nimport {Header} from \"./components/header\";\nimport {ThemeProvider} from \"@emotion/react\";\nimport {customTheme} from \"./theme\";\nimport {Footer} from \"./components/footer\";\n\n\nfunction App() {\n    const rootStore = new RootStore();\n    return (\n        <ThemeProvider theme={customTheme}>\n            <CSSReset />\n            <ChakraProvider>\n                <Header rootStore={rootStore}/>\n                <Container>\n                    <div className=\"App\">\n                        <StatsPanel/>\n                        {/*<AlbumsPanel/>*/}\n\n                        <AudioPlayerComponent context={rootStore} track={undefined}/>\n\n                    </div>\n                </Container>\n                <Footer rootStore={rootStore} />\n            </ChakraProvider>\n        </ThemeProvider>\n\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}